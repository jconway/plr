--
-- first, define the language and functions.  Turn off echoing so that expected file
-- does not depend on contents of plr.sql.
--
\set ECHO none
-- check version
SELECT plr_version();
 plr_version 
-------------
 08.03.00.16
(1 row)

-- make typenames available in the global namespace
select load_r_typenames();
 load_r_typenames 
------------------
 OK
(1 row)

CREATE TABLE plr_modules (
  modseq int4,
  modsrc text
);
INSERT INTO plr_modules VALUES (0, 'pg.test.module.load <-function(msg) {print(msg)}');
select reload_plr_modules();
 reload_plr_modules 
--------------------
 OK
(1 row)

--
-- plr_modules test
--
create or replace function pg_test_module_load(text) returns text as 'pg.test.module.load(arg1)' language 'plr';
select pg_test_module_load('hello world');
 pg_test_module_load 
---------------------
 hello world
(1 row)

--
-- user defined R function test
--
select install_rcmd('pg.test.install <-function(msg) {print(msg)}');
 install_rcmd 
--------------
 OK
(1 row)

create or replace function pg_test_install(text) returns text as 'pg.test.install(arg1)' language 'plr';
select pg_test_install('hello world');
 pg_test_install 
-----------------
 hello world
(1 row)

--
-- test simple input/output types
--
CREATE OR REPLACE FUNCTION rint2(i int2) RETURNS int2 AS $$
return (as.integer(i))
$$ LANGUAGE plr;
select rint2(1::int2);
 rint2 
-------
     1
(1 row)

select rint2(NULL);
 rint2 
-------
      
(1 row)

CREATE OR REPLACE FUNCTION rint4(i int4) RETURNS int4 AS $$
return (as.integer(i))
$$ LANGUAGE plr;
select rint4(1::int4);
 rint4 
-------
     1
(1 row)

select rint4(NULL);
 rint4 
-------
      
(1 row)

CREATE OR REPLACE FUNCTION rint8(i int8) RETURNS int8 AS $$
return (as.integer(i))
$$ LANGUAGE plr;
select rint8(1::int8);
 rint8 
-------
     1
(1 row)

select rint8(NULL);
 rint8 
-------
      
(1 row)

CREATE OR REPLACE FUNCTION rbool(b bool) RETURNS bool AS $$
return (as.logical(b))
$$ LANGUAGE plr;
select rbool('t');
 rbool 
-------
 t
(1 row)

select rbool('f');
 rbool 
-------
 f
(1 row)

select rbool(NULL);
 rbool 
-------
 
(1 row)

CREATE OR REPLACE FUNCTION rfloat4(f float4) RETURNS float4 AS $$
return (as.numeric(f))
$$ LANGUAGE plr;
select rfloat4(1::int4);
 rfloat4 
---------
       1
(1 row)

select rfloat4(NULL);
 rfloat4 
---------
        
(1 row)

CREATE OR REPLACE FUNCTION rfloat8(f float8) RETURNS float8 AS $$
return (as.numeric(f))
$$ LANGUAGE plr;
select rfloat8(1::float8);
 rfloat8 
---------
       1
(1 row)

select rfloat8(NULL);
 rfloat8 
---------
        
(1 row)

--
-- a variety of plr functions
--
create or replace function throw_notice(text) returns text as 'pg.thrownotice(arg1)' language 'plr';
select throw_notice('hello');
NOTICE:  hello
 throw_notice 
--------------
 hello
(1 row)

create or replace function paste(_text,_text,text) returns text[] as 'paste(arg1,arg2, sep = arg3)' language 'plr';
select paste('{hello, happy}','{world, birthday}',' ');
              paste               
----------------------------------
 {"hello world","happy birthday"}
(1 row)

create or replace function vec(_float8) returns _float8 as 'arg1' language 'plr';
select vec('{1.23, 1.32}'::float8[]);
     vec     
-------------
 {1.23,1.32}
(1 row)

create or replace function vec(float, float) returns _float8 as 'c(arg1,arg2)' language 'plr';
select vec(1.23, 1.32);
     vec     
-------------
 {1.23,1.32}
(1 row)

create or replace function echo(text) returns text as 'print(arg1)' language 'plr';
select echo('hello');
 echo  
-------
 hello
(1 row)

create or replace function reval(text) returns text as 'eval(parse(text = arg1))' language 'plr';
select reval('a <- sd(c(1,2,3)); b <- mean(c(1,2,3)); a + b');
 reval 
-------
 3
(1 row)

create or replace function "commandArgs"() returns text[] as '' language 'plr';
select "commandArgs"();
                  commandArgs                   
------------------------------------------------
 {PL/R,--slave,--silent,--no-save,--no-restore}
(1 row)

create or replace function vec(float) returns text as 'c(arg1)' language 'plr';
select vec(1.23);
 vec  
------
 1.23
(1 row)

create or replace function reval(_text) returns text as 'eval(parse(text = arg1))' language 'plr';
select round(reval('{"sd(c(1.12,1.23,1.18,1.34))"}'::text[])::numeric,8);
   round    
------------
 0.09322911
(1 row)

create or replace function print(text) returns text as '' language 'plr';
select print('hello');
 print 
-------
 hello
(1 row)

create or replace function cube(int) returns float as 'sq <- function(x) {return(x * x)}; return(arg1 * sq(arg1))' language 'plr';
select cube(3);
 cube 
------
   27
(1 row)

create or replace function sd(_float8) returns float as 'sd(arg1)' language 'plr';
select round(sd('{1.23,1.31,1.42,1.27}'::_float8)::numeric,8);
   round    
------------
 0.08180261
(1 row)

create or replace function sd(_float8) returns float as '' language 'plr';
select round(sd('{1.23,1.31,1.42,1.27}'::_float8)::numeric,8);
   round    
------------
 0.08180261
(1 row)

create or replace function mean(_float8) returns float as '' language 'plr';
select mean('{1.23,1.31,1.42,1.27}'::_float8);
  mean  
--------
 1.3075
(1 row)

create or replace function sprintf(text,text,text) returns text as 'sprintf(arg1,arg2,arg3)' language 'plr';
select sprintf('%s is %s feet tall', 'Sven', '7');
       sprintf       
---------------------
 Sven is 7 feet tall
(1 row)

--
-- test aggregates
--
create table foo(f0 int, f1 text, f2 float8) with oids;
insert into foo values(1,'cat1',1.21);
insert into foo values(2,'cat1',1.24);
insert into foo values(3,'cat1',1.18);
insert into foo values(4,'cat1',1.26);
insert into foo values(5,'cat1',1.15);
insert into foo values(6,'cat2',1.15);
insert into foo values(7,'cat2',1.26);
insert into foo values(8,'cat2',1.32);
insert into foo values(9,'cat2',1.30);
create or replace function r_median(_float8) returns float as 'median(arg1)' language 'plr';
select r_median('{1.23,1.31,1.42,1.27}'::_float8);
 r_median 
----------
     1.29
(1 row)

CREATE AGGREGATE median (sfunc = plr_array_accum, basetype = float8, stype = _float8, finalfunc = r_median);
select f1, median(f2) from foo group by f1 order by f1;
  f1  | median 
------+--------
 cat1 |   1.21
 cat2 |   1.28
(2 rows)

create or replace function r_gamma(_float8) returns float as 'gamma(arg1)' language 'plr';
select round(r_gamma('{1.23,1.31,1.42,1.27}'::_float8)::numeric,8);
   round    
------------
 0.91075486
(1 row)

CREATE AGGREGATE gamma (sfunc = plr_array_accum, basetype = float8, stype = _float8, finalfunc = r_gamma);
select f1, round(gamma(f2)::numeric,8) from foo group by f1 order by f1;
  f1  |   round    
------+------------
 cat1 | 0.91557649
 cat2 | 0.93304093
(2 rows)

--
-- test returning vectors, arrays, matricies, and dataframes
-- as scalars, arrays, and records
--
create or replace function test_vt() returns text as 'array(1:10,c(2,5))' language 'plr';
select test_vt();
 test_vt 
---------
 1
(1 row)

create or replace function test_vi() returns int as 'array(1:10,c(2,5))' language 'plr';
select test_vi();
 test_vi 
---------
       1
(1 row)

create or replace function test_mt() returns text as 'as.matrix(array(1:10,c(2,5)))' language 'plr';
select test_mt();
 test_mt 
---------
 1
(1 row)

create or replace function test_mi() returns int as 'as.matrix(array(1:10,c(2,5)))' language 'plr';
select test_mi();
 test_mi 
---------
       1
(1 row)

create or replace function test_dt() returns text as 'as.data.frame(array(1:10,c(2,5)))[[1]]' language 'plr';
select test_dt();
 test_dt 
---------
 1
(1 row)

create or replace function test_di() returns int as 'as.data.frame(array(1:10,c(2,5)))[[1]]' language 'plr';
select test_di() as error;
 error 
-------
     1
(1 row)

create or replace function test_vta() returns text[] as 'array(1:10,c(2,5))' language 'plr';
select test_vta();
          test_vta          
----------------------------
 {{1,3,5,7,9},{2,4,6,8,10}}
(1 row)

create or replace function test_via() returns int[] as 'array(1:10,c(2,5))' language 'plr';
select test_via();
          test_via          
----------------------------
 {{1,3,5,7,9},{2,4,6,8,10}}
(1 row)

create or replace function test_mta() returns text[] as 'as.matrix(array(1:10,c(2,5)))' language 'plr';
select test_mta();
          test_mta          
----------------------------
 {{1,3,5,7,9},{2,4,6,8,10}}
(1 row)

create or replace function test_mia() returns int[] as 'as.matrix(array(1:10,c(2,5)))' language 'plr';
select test_mia();
          test_mia          
----------------------------
 {{1,3,5,7,9},{2,4,6,8,10}}
(1 row)

create or replace function test_dia() returns int[] as 'as.data.frame(array(1:10,c(2,5)))' language 'plr';
select test_dia();
          test_dia          
----------------------------
 {{1,3,5,7,9},{2,4,6,8,10}}
(1 row)

create or replace function test_dta() returns text[] as 'as.data.frame(array(1:10,c(2,5)))' language 'plr';
select test_dta();
          test_dta          
----------------------------
 {{1,3,5,7,9},{2,4,6,8,10}}
(1 row)

create or replace function test_dta1() returns text[] as 'as.data.frame(array(letters[1:10], c(2,5)))' language 'plr';
select test_dta1();
         test_dta1         
---------------------------
 {{a,c,e,g,i},{b,d,f,h,j}}
(1 row)

create or replace function test_dta2() returns text[] as 'as.data.frame(data.frame(letters[1:10],1:10))' language 'plr';
select test_dta2();
                           test_dta2                            
----------------------------------------------------------------
 {{a,1},{b,2},{c,3},{d,4},{e,5},{f,6},{g,7},{h,8},{i,9},{j,10}}
(1 row)

-- generates expected error
create or replace function test_dia1() returns int[] as 'as.data.frame(array(letters[1:10], c(2,5)))' language 'plr';
select test_dia1() as error;
ERROR:  invalid input syntax for integer: "a"
CONTEXT:  In PL/R function test_dia1
create or replace function test_dtup() returns setof record as 'data.frame(letters[1:10],1:10)' language 'plr';
select * from test_dtup() as t(f1 text, f2 int);
 f1 | f2 
----+----
 a  |  1
 b  |  2
 c  |  3
 d  |  4
 e  |  5
 f  |  6
 g  |  7
 h  |  8
 i  |  9
 j  | 10
(10 rows)

create or replace function test_mtup() returns setof record as 'as.matrix(array(1:15,c(5,3)))' language 'plr';
select * from test_mtup() as t(f1 int, f2 int, f3 int);
 f1 | f2 | f3 
----+----+----
  1 |  6 | 11
  2 |  7 | 12
  3 |  8 | 13
  4 |  9 | 14
  5 | 10 | 15
(5 rows)

create or replace function test_vtup() returns setof record as 'as.vector(array(1:15,c(5,3)))' language 'plr';
select * from test_vtup() as t(f1 int);
 f1 
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
(15 rows)

create or replace function test_vint() returns setof int as 'as.vector(array(1:15,c(5,3)))' language 'plr';
select * from test_vint();
 test_vint 
-----------
         1
         2
         3
         4
         5
         6
         7
         8
         9
        10
        11
        12
        13
        14
        15
(15 rows)

--
-- try again with named tuple types
--
CREATE TYPE dtup AS (f1 text, f2 int);
CREATE TYPE mtup AS (f1 int, f2 int, f3 int);
CREATE TYPE vtup AS (f1 int);
create or replace function test_dtup1() returns setof dtup as 'data.frame(letters[1:10],1:10)' language 'plr';
select * from test_dtup1();
 f1 | f2 
----+----
 a  |  1
 b  |  2
 c  |  3
 d  |  4
 e  |  5
 f  |  6
 g  |  7
 h  |  8
 i  |  9
 j  | 10
(10 rows)

create or replace function test_dtup2() returns setof dtup as 'data.frame(c("c","qw","ax","h","k","ax","l","t","b","u"),1:10)' language 'plr';
select * from test_dtup2();
 f1 | f2 
----+----
 c  |  1
 qw |  2
 ax |  3
 h  |  4
 k  |  5
 ax |  6
 l  |  7
 t  |  8
 b  |  9
 u  | 10
(10 rows)

create or replace function test_mtup1() returns setof mtup as 'as.matrix(array(1:15,c(5,3)))' language 'plr';
select * from test_mtup1();
 f1 | f2 | f3 
----+----+----
  1 |  6 | 11
  2 |  7 | 12
  3 |  8 | 13
  4 |  9 | 14
  5 | 10 | 15
(5 rows)

create or replace function test_vtup1() returns setof vtup as 'as.vector(array(1:15,c(5,3)))' language 'plr';
select * from test_vtup1();
 f1 
----
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
(15 rows)

--
-- test pg R support functions (e.g. SPI_exec)
--
create or replace function pg_quote_ident(text) returns text as 'pg.quoteident(arg1)' language 'plr';
select pg_quote_ident('Hello World');
 pg_quote_ident 
----------------
 "Hello World"
(1 row)

create or replace function pg_quote_literal(text) returns text as 'pg.quoteliteral(arg1)' language 'plr';
select pg_quote_literal('Hello''World');
 pg_quote_literal 
------------------
 'Hello''World'
(1 row)

create or replace function test_spi_t(text) returns text as '(pg.spi.exec(arg1))[[1]]' language 'plr';
select test_spi_t('select oid, typname from pg_type where typname = ''oid'' or typname = ''text''');
 test_spi_t 
------------
 25
(1 row)

create or replace function test_spi_ta(text) returns text[] as 'pg.spi.exec(arg1)' language 'plr';
select test_spi_ta('select oid, typname from pg_type where typname = ''oid'' or typname = ''text''');
     test_spi_ta      
----------------------
 {{25,text},{26,oid}}
(1 row)

create or replace function test_spi_tup(text) returns setof record as 'pg.spi.exec(arg1)' language 'plr';
select * from test_spi_tup('select oid, typname from pg_type where typname = ''oid'' or typname = ''text''') as t(typeid oid, typename name);
 typeid | typename 
--------+----------
     25 | text
     26 | oid
(2 rows)

create or replace function fetch_pgoid(text) returns int as 'pg.reval(arg1)' language 'plr';
select fetch_pgoid('BYTEAOID');
 fetch_pgoid 
-------------
          17
(1 row)

create or replace function test_spi_prep(text) returns text as 'sp <<- pg.spi.prepare(arg1, c(NAMEOID, NAMEOID)); print("OK")' language 'plr';
select test_spi_prep('select oid, typname from pg_type where typname = $1 or typname = $2');
 test_spi_prep 
---------------
 OK
(1 row)

create or replace function test_spi_execp(text, text, text) returns setof record as 'pg.spi.execp(pg.reval(arg1), list(arg2,arg3))' language 'plr';
select * from test_spi_execp('sp','oid','text') as t(typeid oid, typename name);
 typeid | typename 
--------+----------
     25 | text
     26 | oid
(2 rows)

create or replace function test_spi_lastoid(text) returns text as 'pg.spi.exec(arg1); pg.spi.lastoid()/pg.spi.lastoid()' language 'plr';
select test_spi_lastoid('insert into foo values(10,''cat3'',3.333)') as "ONE";
 ONE 
-----
 1
(1 row)

--
-- test NULL handling
--
CREATE OR REPLACE FUNCTION r_test (float8) RETURNS float8 AS 'arg1' LANGUAGE 'plr';
select r_test(null) is null as "NULL";
 NULL 
------
 t
(1 row)

CREATE OR REPLACE FUNCTION r_max (integer, integer) RETURNS integer AS 'if (is.null(arg1) && is.null(arg2)) return(NA);if (is.null(arg1)) return(arg2);if (is.null(arg2)) return(arg1);if (arg1 > arg2) return(arg1);arg2' LANGUAGE 'plr';
select r_max(1,2) as "TWO";
 TWO 
-----
   2
(1 row)

select r_max(null,2) as "TWO";
 TWO 
-----
   2
(1 row)

select r_max(1,null) as "ONE";
 ONE 
-----
   1
(1 row)

select r_max(null,null) is null as "NULL";
 NULL 
------
 t
(1 row)

--
-- test tuple arguments
--
create or replace function get_foo(int) returns foo as 'select * from foo where f0 = $1' language 'sql';
create or replace function test_foo(foo) returns foo as 'return(arg1)' language 'plr';
select * from test_foo(get_foo(1));
 f0 |  f1  |  f2  
----+------+------
  1 | cat1 | 1.21
(1 row)

--
-- test 2D array argument
--
create or replace function test_in_m_tup(_int4) returns setof record as 'arg1' language 'plr';
select * from test_in_m_tup('{{1,3,5},{2,4,6}}') as t(f1 int, f2 int, f3 int);
 f1 | f2 | f3 
----+----+----
  1 |  3 |  5
  2 |  4 |  6
(2 rows)

--
-- test 3D array argument
--
create or replace function arr3d(_int4,int4,int4,int4) returns int4 as '
if (arg2 < 1 || arg3 < 1 || arg4 < 1)
  return(NA)
if (arg2 > dim(arg1)[1] || arg3 > dim(arg1)[2] || arg4 > dim(arg1)[3])
  return(NA)
return(arg1[arg2,arg3,arg4])
' language 'plr' WITH (isstrict);
select arr3d('{{{111,112},{121,122},{131,132}},{{211,212},{221,222},{231,232}}}',2,3,1) as "231";
 231 
-----
 231
(1 row)

-- for sake of comparison, see what normal pgsql array operations produces
select f1[2][3][1] as "231" from (select '{{{111,112},{121,122},{131,132}},{{211,212},{221,222},{231,232}}}'::int4[] as f1) as t;
 231 
-----
 231
(1 row)

-- out-of-bounds, returns null
select arr3d('{{{111,112},{121,122},{131,132}},{{211,212},{221,222},{231,232}}}',1,4,1) is null as "NULL";
 NULL 
------
 t
(1 row)

select f1[1][4][1] is null as "NULL" from (select '{{{111,112},{121,122},{131,132}},{{211,212},{221,222},{231,232}}}'::int4[] as f1) as t;
 NULL 
------
 t
(1 row)

select arr3d('{{{111,112},{121,122},{131,132}},{{211,212},{221,222},{231,232}}}',0,1,1) is null as "NULL";
 NULL 
------
 t
(1 row)

select f1[0][1][1] is null as "NULL" from (select '{{{111,112},{121,122},{131,132}},{{211,212},{221,222},{231,232}}}'::int4[] as f1) as t;
 NULL 
------
 t
(1 row)

--
-- test 3D array return value
--
create or replace function arr3d(_int4) returns int4[] as 'return(arg1)' language 'plr' WITH (isstrict);
select arr3d('{{{111,112},{121,122},{131,132}},{{211,212},{221,222},{231,232}}}');
                               arr3d                               
-------------------------------------------------------------------
 {{{111,112},{121,122},{131,132}},{{211,212},{221,222},{231,232}}}
(1 row)

--
-- Trigger support tests
--
--
-- test that NULL return value suppresses the change
--
create or replace function rejectfoo() returns trigger as 'return(NULL)' language plr;
create trigger footrig before insert or update or delete on foo for each row execute procedure rejectfoo();
select count(*) from foo;
 count 
-------
    10
(1 row)

insert into foo values(11,'cat99',1.89);
select count(*) from foo;
 count 
-------
    10
(1 row)

update foo set f1 = 'zzz';
select count(*) from foo;
 count 
-------
    10
(1 row)

delete from foo;
select count(*) from foo;
 count 
-------
    10
(1 row)

drop trigger footrig on foo;
--
-- test that returning OLD/NEW as appropriate allow the change unmodified
--
create or replace function acceptfoo() returns trigger as '
switch (pg.tg.op, INSERT = return(pg.tg.new), UPDATE = return(pg.tg.new), DELETE = return(pg.tg.old))
' language plr;
create trigger footrig before insert or update or delete on foo for each row execute procedure acceptfoo();
select count(*) from foo;
 count 
-------
    10
(1 row)

insert into foo values(11,'cat99',1.89);
select count(*) from foo;
 count 
-------
    11
(1 row)

update foo set f1 = 'zzz' where f0 = 11;
select * from foo where f0 = 11;
 f0 | f1  |  f2  
----+-----+------
 11 | zzz | 1.89
(1 row)

delete from foo where f0 = 11;
select count(*) from foo;
 count 
-------
    10
(1 row)

drop trigger footrig on foo;
--
-- test that returning modifed tuple successfully modifies the result
--
create or replace function modfoo() returns trigger as '
if (pg.tg.op == "INSERT")
{
  retval <- pg.tg.new
  retval$f1 <- "xxx"
}
if (pg.tg.op == "UPDATE")
{
  retval <- pg.tg.new
  retval$f1 <- "aaa"
}
if (pg.tg.op == "DELETE")
  retval <- pg.tg.old
return(retval)
' language plr;
create trigger footrig before insert or update or delete on foo for each row execute procedure modfoo();
select count(*) from foo;
 count 
-------
    10
(1 row)

insert into foo values(11,'cat99',1.89);
select * from foo where f0 = 11;
 f0 | f1  |  f2  
----+-----+------
 11 | xxx | 1.89
(1 row)

update foo set f1 = 'zzz' where f0 = 11;
select * from foo where f0 = 11;
 f0 | f1  |  f2  
----+-----+------
 11 | aaa | 1.89
(1 row)

delete from foo where f0 = 11;
select count(*) from foo;
 count 
-------
    10
(1 row)

drop trigger footrig on foo;
--
-- test statement level triggers and verify all arguments come
-- across correctly
--
create or replace function foonotice() returns trigger as '
msg <- paste(pg.tg.name,pg.tg.relname,pg.tg.when,pg.tg.level,pg.tg.op,pg.tg.args[1],pg.tg.args[2])
pg.thrownotice(msg)
return(NULL)
' language plr;
create trigger footrig after insert or update or delete on foo for each row execute procedure foonotice();
select count(*) from foo;
 count 
-------
    10
(1 row)

insert into foo values(11,'cat99',1.89);
NOTICE:  footrig foo AFTER ROW INSERT NA NA
select count(*) from foo;
 count 
-------
    11
(1 row)

update foo set f1 = 'zzz' where f0 = 11;
NOTICE:  footrig foo AFTER ROW UPDATE NA NA
select * from foo where f0 = 11;
 f0 | f1  |  f2  
----+-----+------
 11 | zzz | 1.89
(1 row)

delete from foo where f0 = 11;
NOTICE:  footrig foo AFTER ROW DELETE NA NA
select count(*) from foo;
 count 
-------
    10
(1 row)

drop trigger footrig on foo;
create trigger footrig after insert or update or delete on foo for each statement execute procedure foonotice('hello','world');
select count(*) from foo;
 count 
-------
    10
(1 row)

insert into foo values(11,'cat99',1.89);
NOTICE:  footrig foo AFTER STATEMENT INSERT hello world
select count(*) from foo;
 count 
-------
    11
(1 row)

update foo set f1 = 'zzz' where f0 = 11;
NOTICE:  footrig foo AFTER STATEMENT UPDATE hello world
select * from foo where f0 = 11;
 f0 | f1  |  f2  
----+-----+------
 11 | zzz | 1.89
(1 row)

delete from foo where f0 = 11;
NOTICE:  footrig foo AFTER STATEMENT DELETE hello world
select count(*) from foo;
 count 
-------
    10
(1 row)

drop trigger footrig on foo;
-- Test cursors: creating, scrolling forward, closing
CREATE OR REPLACE FUNCTION cursor_fetch_test(integer,boolean) RETURNS SETOF integer AS 'plan<-pg.spi.prepare("SELECT * FROM generate_series(1,10)"); cursor<-pg.spi.cursor_open("curs",plan); dat<-pg.spi.cursor_fetch(cursor,arg2,arg1); pg.spi.cursor_close(cursor); return (dat);' language 'plr';
SELECT * FROM cursor_fetch_test(1,true);
 cursor_fetch_test 
-------------------
                 1
(1 row)

SELECT * FROM cursor_fetch_test(2,true);
 cursor_fetch_test 
-------------------
                 1
                 2
(2 rows)

SELECT * FROM cursor_fetch_test(20,true);
 cursor_fetch_test 
-------------------
                 1
                 2
                 3
                 4
                 5
                 6
                 7
                 8
                 9
                10
(10 rows)

--Test cursors: scrolling backwards
CREATE OR REPLACE FUNCTION cursor_direction_test() RETURNS SETOF integer AS'plan<-pg.spi.prepare("SELECT * FROM generate_series(1,10)"); cursor<-pg.spi.cursor_open("curs",plan); dat<-pg.spi.cursor_fetch(cursor,TRUE,as.integer(3)); dat2<-pg.spi.cursor_fetch(cursor,FALSE,as.integer(3)); pg.spi.cursor_close(cursor); return (dat2);' language 'plr';
SELECT * FROM cursor_direction_test();
 cursor_direction_test 
-----------------------
                     2
                     1
(2 rows)

--Test cursors: Passing arguments to a plan
CREATE OR REPLACE FUNCTION cursor_fetch_test_arg(integer) RETURNS SETOF integer AS 'plan<-pg.spi.prepare("SELECT * FROM generate_series(1,$1)",c(INT4OID)); cursor<-pg.spi.cursor_open("curs",plan,list(arg1)); dat<-pg.spi.cursor_fetch(cursor,TRUE,arg1); pg.spi.cursor_close(cursor); return (dat);' language 'plr';
SELECT * FROM cursor_fetch_test_arg(3);
 cursor_fetch_test_arg 
-----------------------
                     1
                     2
                     3
(3 rows)

--Test bytea arguments and return values: serialize/unserialize
create or replace function test_serialize(text)
returns bytea as '
 mydf <- pg.spi.exec(arg1)
 return (mydf)
' language 'plr';
create or replace function restore_df(bytea)
returns setof record as '
 return (arg1)
' language 'plr';
select * from restore_df((select test_serialize('select oid, typname from pg_type where typname in (''oid'',''name'',''int4'')'))) as t(oid oid, typname name);
 oid | typname 
-----+---------
  19 | name
  23 | int4
  26 | oid
(3 rows)

--Test WINDOW functions
-- create test table
CREATE TABLE test_data (
  fyear integer,
  firm float8,
  eps float8
);
-- insert data for test
INSERT INTO test_data
SELECT (b.f + 1) % 10 + 2000 AS fyear,
	floor((b.f+1)/10) + 50 AS firm,
       f::float8/100 AS eps
FROM generate_series(-200,199,1) b(f);
CREATE OR REPLACE
FUNCTION r_regr_slope(float8, float8)
RETURNS float8 AS
$BODY$
  slope <- NA
  y <- farg1
  x <- farg2 
  if (fnumrows==9) try (slope <- lm(y ~ x)$coefficients[2])
  return(slope)
$BODY$
LANGUAGE plr WINDOW;
SELECT *, round((r_regr_slope(eps, lag_eps) OVER w)::numeric,6) AS slope_R
FROM (SELECT firm, fyear, eps,
  lag(eps) OVER (ORDER BY firm, fyear) AS lag_eps
FROM test_data) AS a
WHERE eps IS NOT NULL
WINDOW w AS (ORDER BY firm, fyear ROWS 8 PRECEDING);
 firm | fyear |  eps  | lag_eps | slope_r  
------+-------+-------+---------+----------
   31 |  1991 |    -2 |         |         
   31 |  1992 | -1.99 |      -2 |         
   31 |  1993 | -1.98 |   -1.99 |         
   31 |  1994 | -1.97 |   -1.98 |         
   31 |  1995 | -1.96 |   -1.97 |         
   31 |  1996 | -1.95 |   -1.96 |         
   31 |  1997 | -1.94 |   -1.95 |         
   31 |  1998 | -1.93 |   -1.94 |         
   31 |  1999 | -1.92 |   -1.93 | 1.000000
   31 |  2000 | -1.91 |   -1.92 | 1.000000
   32 |  1991 |  -1.9 |   -1.91 | 1.000000
   32 |  1992 | -1.89 |    -1.9 | 1.000000
   32 |  1993 | -1.88 |   -1.89 | 1.000000
   32 |  1994 | -1.87 |   -1.88 | 1.000000
   32 |  1995 | -1.86 |   -1.87 | 1.000000
   32 |  1996 | -1.85 |   -1.86 | 1.000000
   32 |  1997 | -1.84 |   -1.85 | 1.000000
   32 |  1998 | -1.83 |   -1.84 | 1.000000
   32 |  1999 | -1.82 |   -1.83 | 1.000000
   32 |  2000 | -1.81 |   -1.82 | 1.000000
   33 |  1991 |  -1.8 |   -1.81 | 1.000000
   33 |  1992 | -1.79 |    -1.8 | 1.000000
   33 |  1993 | -1.78 |   -1.79 | 1.000000
   33 |  1994 | -1.77 |   -1.78 | 1.000000
   33 |  1995 | -1.76 |   -1.77 | 1.000000
   33 |  1996 | -1.75 |   -1.76 | 1.000000
   33 |  1997 | -1.74 |   -1.75 | 1.000000
   33 |  1998 | -1.73 |   -1.74 | 1.000000
   33 |  1999 | -1.72 |   -1.73 | 1.000000
   33 |  2000 | -1.71 |   -1.72 | 1.000000
   34 |  1991 |  -1.7 |   -1.71 | 1.000000
   34 |  1992 | -1.69 |    -1.7 | 1.000000
   34 |  1993 | -1.68 |   -1.69 | 1.000000
   34 |  1994 | -1.67 |   -1.68 | 1.000000
   34 |  1995 | -1.66 |   -1.67 | 1.000000
   34 |  1996 | -1.65 |   -1.66 | 1.000000
   34 |  1997 | -1.64 |   -1.65 | 1.000000
   34 |  1998 | -1.63 |   -1.64 | 1.000000
   34 |  1999 | -1.62 |   -1.63 | 1.000000
   34 |  2000 | -1.61 |   -1.62 | 1.000000
   35 |  1991 |  -1.6 |   -1.61 | 1.000000
   35 |  1992 | -1.59 |    -1.6 | 1.000000
   35 |  1993 | -1.58 |   -1.59 | 1.000000
   35 |  1994 | -1.57 |   -1.58 | 1.000000
   35 |  1995 | -1.56 |   -1.57 | 1.000000
   35 |  1996 | -1.55 |   -1.56 | 1.000000
   35 |  1997 | -1.54 |   -1.55 | 1.000000
   35 |  1998 | -1.53 |   -1.54 | 1.000000
   35 |  1999 | -1.52 |   -1.53 | 1.000000
   35 |  2000 | -1.51 |   -1.52 | 1.000000
   36 |  1991 |  -1.5 |   -1.51 | 1.000000
   36 |  1992 | -1.49 |    -1.5 | 1.000000
   36 |  1993 | -1.48 |   -1.49 | 1.000000
   36 |  1994 | -1.47 |   -1.48 | 1.000000
   36 |  1995 | -1.46 |   -1.47 | 1.000000
   36 |  1996 | -1.45 |   -1.46 | 1.000000
   36 |  1997 | -1.44 |   -1.45 | 1.000000
   36 |  1998 | -1.43 |   -1.44 | 1.000000
   36 |  1999 | -1.42 |   -1.43 | 1.000000
   36 |  2000 | -1.41 |   -1.42 | 1.000000
   37 |  1991 |  -1.4 |   -1.41 | 1.000000
   37 |  1992 | -1.39 |    -1.4 | 1.000000
   37 |  1993 | -1.38 |   -1.39 | 1.000000
   37 |  1994 | -1.37 |   -1.38 | 1.000000
   37 |  1995 | -1.36 |   -1.37 | 1.000000
   37 |  1996 | -1.35 |   -1.36 | 1.000000
   37 |  1997 | -1.34 |   -1.35 | 1.000000
   37 |  1998 | -1.33 |   -1.34 | 1.000000
   37 |  1999 | -1.32 |   -1.33 | 1.000000
   37 |  2000 | -1.31 |   -1.32 | 1.000000
   38 |  1991 |  -1.3 |   -1.31 | 1.000000
   38 |  1992 | -1.29 |    -1.3 | 1.000000
   38 |  1993 | -1.28 |   -1.29 | 1.000000
   38 |  1994 | -1.27 |   -1.28 | 1.000000
   38 |  1995 | -1.26 |   -1.27 | 1.000000
   38 |  1996 | -1.25 |   -1.26 | 1.000000
   38 |  1997 | -1.24 |   -1.25 | 1.000000
   38 |  1998 | -1.23 |   -1.24 | 1.000000
   38 |  1999 | -1.22 |   -1.23 | 1.000000
   38 |  2000 | -1.21 |   -1.22 | 1.000000
   39 |  1991 |  -1.2 |   -1.21 | 1.000000
   39 |  1992 | -1.19 |    -1.2 | 1.000000
   39 |  1993 | -1.18 |   -1.19 | 1.000000
   39 |  1994 | -1.17 |   -1.18 | 1.000000
   39 |  1995 | -1.16 |   -1.17 | 1.000000
   39 |  1996 | -1.15 |   -1.16 | 1.000000
   39 |  1997 | -1.14 |   -1.15 | 1.000000
   39 |  1998 | -1.13 |   -1.14 | 1.000000
   39 |  1999 | -1.12 |   -1.13 | 1.000000
   39 |  2000 | -1.11 |   -1.12 | 1.000000
   40 |  1991 |  -1.1 |   -1.11 | 1.000000
   40 |  1992 | -1.09 |    -1.1 | 1.000000
   40 |  1993 | -1.08 |   -1.09 | 1.000000
   40 |  1994 | -1.07 |   -1.08 | 1.000000
   40 |  1995 | -1.06 |   -1.07 | 1.000000
   40 |  1996 | -1.05 |   -1.06 | 1.000000
   40 |  1997 | -1.04 |   -1.05 | 1.000000
   40 |  1998 | -1.03 |   -1.04 | 1.000000
   40 |  1999 | -1.02 |   -1.03 | 1.000000
   40 |  2000 | -1.01 |   -1.02 | 1.000000
   41 |  1991 |    -1 |   -1.01 | 1.000000
   41 |  1992 | -0.99 |      -1 | 1.000000
   41 |  1993 | -0.98 |   -0.99 | 1.000000
   41 |  1994 | -0.97 |   -0.98 | 1.000000
   41 |  1995 | -0.96 |   -0.97 | 1.000000
   41 |  1996 | -0.95 |   -0.96 | 1.000000
   41 |  1997 | -0.94 |   -0.95 | 1.000000
   41 |  1998 | -0.93 |   -0.94 | 1.000000
   41 |  1999 | -0.92 |   -0.93 | 1.000000
   41 |  2000 | -0.91 |   -0.92 | 1.000000
   42 |  1991 |  -0.9 |   -0.91 | 1.000000
   42 |  1992 | -0.89 |    -0.9 | 1.000000
   42 |  1993 | -0.88 |   -0.89 | 1.000000
   42 |  1994 | -0.87 |   -0.88 | 1.000000
   42 |  1995 | -0.86 |   -0.87 | 1.000000
   42 |  1996 | -0.85 |   -0.86 | 1.000000
   42 |  1997 | -0.84 |   -0.85 | 1.000000
   42 |  1998 | -0.83 |   -0.84 | 1.000000
   42 |  1999 | -0.82 |   -0.83 | 1.000000
   42 |  2000 | -0.81 |   -0.82 | 1.000000
   43 |  1991 |  -0.8 |   -0.81 | 1.000000
   43 |  1992 | -0.79 |    -0.8 | 1.000000
   43 |  1993 | -0.78 |   -0.79 | 1.000000
   43 |  1994 | -0.77 |   -0.78 | 1.000000
   43 |  1995 | -0.76 |   -0.77 | 1.000000
   43 |  1996 | -0.75 |   -0.76 | 1.000000
   43 |  1997 | -0.74 |   -0.75 | 1.000000
   43 |  1998 | -0.73 |   -0.74 | 1.000000
   43 |  1999 | -0.72 |   -0.73 | 1.000000
   43 |  2000 | -0.71 |   -0.72 | 1.000000
   44 |  1991 |  -0.7 |   -0.71 | 1.000000
   44 |  1992 | -0.69 |    -0.7 | 1.000000
   44 |  1993 | -0.68 |   -0.69 | 1.000000
   44 |  1994 | -0.67 |   -0.68 | 1.000000
   44 |  1995 | -0.66 |   -0.67 | 1.000000
   44 |  1996 | -0.65 |   -0.66 | 1.000000
   44 |  1997 | -0.64 |   -0.65 | 1.000000
   44 |  1998 | -0.63 |   -0.64 | 1.000000
   44 |  1999 | -0.62 |   -0.63 | 1.000000
   44 |  2000 | -0.61 |   -0.62 | 1.000000
   45 |  1991 |  -0.6 |   -0.61 | 1.000000
   45 |  1992 | -0.59 |    -0.6 | 1.000000
   45 |  1993 | -0.58 |   -0.59 | 1.000000
   45 |  1994 | -0.57 |   -0.58 | 1.000000
   45 |  1995 | -0.56 |   -0.57 | 1.000000
   45 |  1996 | -0.55 |   -0.56 | 1.000000
   45 |  1997 | -0.54 |   -0.55 | 1.000000
   45 |  1998 | -0.53 |   -0.54 | 1.000000
   45 |  1999 | -0.52 |   -0.53 | 1.000000
   45 |  2000 | -0.51 |   -0.52 | 1.000000
   46 |  1991 |  -0.5 |   -0.51 | 1.000000
   46 |  1992 | -0.49 |    -0.5 | 1.000000
   46 |  1993 | -0.48 |   -0.49 | 1.000000
   46 |  1994 | -0.47 |   -0.48 | 1.000000
   46 |  1995 | -0.46 |   -0.47 | 1.000000
   46 |  1996 | -0.45 |   -0.46 | 1.000000
   46 |  1997 | -0.44 |   -0.45 | 1.000000
   46 |  1998 | -0.43 |   -0.44 | 1.000000
   46 |  1999 | -0.42 |   -0.43 | 1.000000
   46 |  2000 | -0.41 |   -0.42 | 1.000000
   47 |  1991 |  -0.4 |   -0.41 | 1.000000
   47 |  1992 | -0.39 |    -0.4 | 1.000000
   47 |  1993 | -0.38 |   -0.39 | 1.000000
   47 |  1994 | -0.37 |   -0.38 | 1.000000
   47 |  1995 | -0.36 |   -0.37 | 1.000000
   47 |  1996 | -0.35 |   -0.36 | 1.000000
   47 |  1997 | -0.34 |   -0.35 | 1.000000
   47 |  1998 | -0.33 |   -0.34 | 1.000000
   47 |  1999 | -0.32 |   -0.33 | 1.000000
   47 |  2000 | -0.31 |   -0.32 | 1.000000
   48 |  1991 |  -0.3 |   -0.31 | 1.000000
   48 |  1992 | -0.29 |    -0.3 | 1.000000
   48 |  1993 | -0.28 |   -0.29 | 1.000000
   48 |  1994 | -0.27 |   -0.28 | 1.000000
   48 |  1995 | -0.26 |   -0.27 | 1.000000
   48 |  1996 | -0.25 |   -0.26 | 1.000000
   48 |  1997 | -0.24 |   -0.25 | 1.000000
   48 |  1998 | -0.23 |   -0.24 | 1.000000
   48 |  1999 | -0.22 |   -0.23 | 1.000000
   48 |  2000 | -0.21 |   -0.22 | 1.000000
   49 |  1991 |  -0.2 |   -0.21 | 1.000000
   49 |  1992 | -0.19 |    -0.2 | 1.000000
   49 |  1993 | -0.18 |   -0.19 | 1.000000
   49 |  1994 | -0.17 |   -0.18 | 1.000000
   49 |  1995 | -0.16 |   -0.17 | 1.000000
   49 |  1996 | -0.15 |   -0.16 | 1.000000
   49 |  1997 | -0.14 |   -0.15 | 1.000000
   49 |  1998 | -0.13 |   -0.14 | 1.000000
   49 |  1999 | -0.12 |   -0.13 | 1.000000
   49 |  2000 | -0.11 |   -0.12 | 1.000000
   50 |  1991 |  -0.1 |   -0.11 | 1.000000
   50 |  1992 | -0.09 |    -0.1 | 1.000000
   50 |  1993 | -0.08 |   -0.09 | 1.000000
   50 |  1994 | -0.07 |   -0.08 | 1.000000
   50 |  1995 | -0.06 |   -0.07 | 1.000000
   50 |  1996 | -0.05 |   -0.06 | 1.000000
   50 |  1997 | -0.04 |   -0.05 | 1.000000
   50 |  1998 | -0.03 |   -0.04 | 1.000000
   50 |  1999 | -0.02 |   -0.03 | 1.000000
   50 |  2000 | -0.01 |   -0.02 | 1.000000
   50 |  2001 |     0 |   -0.01 | 1.000000
   50 |  2002 |  0.01 |       0 | 1.000000
   50 |  2003 |  0.02 |    0.01 | 1.000000
   50 |  2004 |  0.03 |    0.02 | 1.000000
   50 |  2005 |  0.04 |    0.03 | 1.000000
   50 |  2006 |  0.05 |    0.04 | 1.000000
   50 |  2007 |  0.06 |    0.05 | 1.000000
   50 |  2008 |  0.07 |    0.06 | 1.000000
   50 |  2009 |  0.08 |    0.07 | 1.000000
   51 |  2000 |  0.09 |    0.08 | 1.000000
   51 |  2001 |   0.1 |    0.09 | 1.000000
   51 |  2002 |  0.11 |     0.1 | 1.000000
   51 |  2003 |  0.12 |    0.11 | 1.000000
   51 |  2004 |  0.13 |    0.12 | 1.000000
   51 |  2005 |  0.14 |    0.13 | 1.000000
   51 |  2006 |  0.15 |    0.14 | 1.000000
   51 |  2007 |  0.16 |    0.15 | 1.000000
   51 |  2008 |  0.17 |    0.16 | 1.000000
   51 |  2009 |  0.18 |    0.17 | 1.000000
   52 |  2000 |  0.19 |    0.18 | 1.000000
   52 |  2001 |   0.2 |    0.19 | 1.000000
   52 |  2002 |  0.21 |     0.2 | 1.000000
   52 |  2003 |  0.22 |    0.21 | 1.000000
   52 |  2004 |  0.23 |    0.22 | 1.000000
   52 |  2005 |  0.24 |    0.23 | 1.000000
   52 |  2006 |  0.25 |    0.24 | 1.000000
   52 |  2007 |  0.26 |    0.25 | 1.000000
   52 |  2008 |  0.27 |    0.26 | 1.000000
   52 |  2009 |  0.28 |    0.27 | 1.000000
   53 |  2000 |  0.29 |    0.28 | 1.000000
   53 |  2001 |   0.3 |    0.29 | 1.000000
   53 |  2002 |  0.31 |     0.3 | 1.000000
   53 |  2003 |  0.32 |    0.31 | 1.000000
   53 |  2004 |  0.33 |    0.32 | 1.000000
   53 |  2005 |  0.34 |    0.33 | 1.000000
   53 |  2006 |  0.35 |    0.34 | 1.000000
   53 |  2007 |  0.36 |    0.35 | 1.000000
   53 |  2008 |  0.37 |    0.36 | 1.000000
   53 |  2009 |  0.38 |    0.37 | 1.000000
   54 |  2000 |  0.39 |    0.38 | 1.000000
   54 |  2001 |   0.4 |    0.39 | 1.000000
   54 |  2002 |  0.41 |     0.4 | 1.000000
   54 |  2003 |  0.42 |    0.41 | 1.000000
   54 |  2004 |  0.43 |    0.42 | 1.000000
   54 |  2005 |  0.44 |    0.43 | 1.000000
   54 |  2006 |  0.45 |    0.44 | 1.000000
   54 |  2007 |  0.46 |    0.45 | 1.000000
   54 |  2008 |  0.47 |    0.46 | 1.000000
   54 |  2009 |  0.48 |    0.47 | 1.000000
   55 |  2000 |  0.49 |    0.48 | 1.000000
   55 |  2001 |   0.5 |    0.49 | 1.000000
   55 |  2002 |  0.51 |     0.5 | 1.000000
   55 |  2003 |  0.52 |    0.51 | 1.000000
   55 |  2004 |  0.53 |    0.52 | 1.000000
   55 |  2005 |  0.54 |    0.53 | 1.000000
   55 |  2006 |  0.55 |    0.54 | 1.000000
   55 |  2007 |  0.56 |    0.55 | 1.000000
   55 |  2008 |  0.57 |    0.56 | 1.000000
   55 |  2009 |  0.58 |    0.57 | 1.000000
   56 |  2000 |  0.59 |    0.58 | 1.000000
   56 |  2001 |   0.6 |    0.59 | 1.000000
   56 |  2002 |  0.61 |     0.6 | 1.000000
   56 |  2003 |  0.62 |    0.61 | 1.000000
   56 |  2004 |  0.63 |    0.62 | 1.000000
   56 |  2005 |  0.64 |    0.63 | 1.000000
   56 |  2006 |  0.65 |    0.64 | 1.000000
   56 |  2007 |  0.66 |    0.65 | 1.000000
   56 |  2008 |  0.67 |    0.66 | 1.000000
   56 |  2009 |  0.68 |    0.67 | 1.000000
   57 |  2000 |  0.69 |    0.68 | 1.000000
   57 |  2001 |   0.7 |    0.69 | 1.000000
   57 |  2002 |  0.71 |     0.7 | 1.000000
   57 |  2003 |  0.72 |    0.71 | 1.000000
   57 |  2004 |  0.73 |    0.72 | 1.000000
   57 |  2005 |  0.74 |    0.73 | 1.000000
   57 |  2006 |  0.75 |    0.74 | 1.000000
   57 |  2007 |  0.76 |    0.75 | 1.000000
   57 |  2008 |  0.77 |    0.76 | 1.000000
   57 |  2009 |  0.78 |    0.77 | 1.000000
   58 |  2000 |  0.79 |    0.78 | 1.000000
   58 |  2001 |   0.8 |    0.79 | 1.000000
   58 |  2002 |  0.81 |     0.8 | 1.000000
   58 |  2003 |  0.82 |    0.81 | 1.000000
   58 |  2004 |  0.83 |    0.82 | 1.000000
   58 |  2005 |  0.84 |    0.83 | 1.000000
   58 |  2006 |  0.85 |    0.84 | 1.000000
   58 |  2007 |  0.86 |    0.85 | 1.000000
   58 |  2008 |  0.87 |    0.86 | 1.000000
   58 |  2009 |  0.88 |    0.87 | 1.000000
   59 |  2000 |  0.89 |    0.88 | 1.000000
   59 |  2001 |   0.9 |    0.89 | 1.000000
   59 |  2002 |  0.91 |     0.9 | 1.000000
   59 |  2003 |  0.92 |    0.91 | 1.000000
   59 |  2004 |  0.93 |    0.92 | 1.000000
   59 |  2005 |  0.94 |    0.93 | 1.000000
   59 |  2006 |  0.95 |    0.94 | 1.000000
   59 |  2007 |  0.96 |    0.95 | 1.000000
   59 |  2008 |  0.97 |    0.96 | 1.000000
   59 |  2009 |  0.98 |    0.97 | 1.000000
   60 |  2000 |  0.99 |    0.98 | 1.000000
   60 |  2001 |     1 |    0.99 | 1.000000
   60 |  2002 |  1.01 |       1 | 1.000000
   60 |  2003 |  1.02 |    1.01 | 1.000000
   60 |  2004 |  1.03 |    1.02 | 1.000000
   60 |  2005 |  1.04 |    1.03 | 1.000000
   60 |  2006 |  1.05 |    1.04 | 1.000000
   60 |  2007 |  1.06 |    1.05 | 1.000000
   60 |  2008 |  1.07 |    1.06 | 1.000000
   60 |  2009 |  1.08 |    1.07 | 1.000000
   61 |  2000 |  1.09 |    1.08 | 1.000000
   61 |  2001 |   1.1 |    1.09 | 1.000000
   61 |  2002 |  1.11 |     1.1 | 1.000000
   61 |  2003 |  1.12 |    1.11 | 1.000000
   61 |  2004 |  1.13 |    1.12 | 1.000000
   61 |  2005 |  1.14 |    1.13 | 1.000000
   61 |  2006 |  1.15 |    1.14 | 1.000000
   61 |  2007 |  1.16 |    1.15 | 1.000000
   61 |  2008 |  1.17 |    1.16 | 1.000000
   61 |  2009 |  1.18 |    1.17 | 1.000000
   62 |  2000 |  1.19 |    1.18 | 1.000000
   62 |  2001 |   1.2 |    1.19 | 1.000000
   62 |  2002 |  1.21 |     1.2 | 1.000000
   62 |  2003 |  1.22 |    1.21 | 1.000000
   62 |  2004 |  1.23 |    1.22 | 1.000000
   62 |  2005 |  1.24 |    1.23 | 1.000000
   62 |  2006 |  1.25 |    1.24 | 1.000000
   62 |  2007 |  1.26 |    1.25 | 1.000000
   62 |  2008 |  1.27 |    1.26 | 1.000000
   62 |  2009 |  1.28 |    1.27 | 1.000000
   63 |  2000 |  1.29 |    1.28 | 1.000000
   63 |  2001 |   1.3 |    1.29 | 1.000000
   63 |  2002 |  1.31 |     1.3 | 1.000000
   63 |  2003 |  1.32 |    1.31 | 1.000000
   63 |  2004 |  1.33 |    1.32 | 1.000000
   63 |  2005 |  1.34 |    1.33 | 1.000000
   63 |  2006 |  1.35 |    1.34 | 1.000000
   63 |  2007 |  1.36 |    1.35 | 1.000000
   63 |  2008 |  1.37 |    1.36 | 1.000000
   63 |  2009 |  1.38 |    1.37 | 1.000000
   64 |  2000 |  1.39 |    1.38 | 1.000000
   64 |  2001 |   1.4 |    1.39 | 1.000000
   64 |  2002 |  1.41 |     1.4 | 1.000000
   64 |  2003 |  1.42 |    1.41 | 1.000000
   64 |  2004 |  1.43 |    1.42 | 1.000000
   64 |  2005 |  1.44 |    1.43 | 1.000000
   64 |  2006 |  1.45 |    1.44 | 1.000000
   64 |  2007 |  1.46 |    1.45 | 1.000000
   64 |  2008 |  1.47 |    1.46 | 1.000000
   64 |  2009 |  1.48 |    1.47 | 1.000000
   65 |  2000 |  1.49 |    1.48 | 1.000000
   65 |  2001 |   1.5 |    1.49 | 1.000000
   65 |  2002 |  1.51 |     1.5 | 1.000000
   65 |  2003 |  1.52 |    1.51 | 1.000000
   65 |  2004 |  1.53 |    1.52 | 1.000000
   65 |  2005 |  1.54 |    1.53 | 1.000000
   65 |  2006 |  1.55 |    1.54 | 1.000000
   65 |  2007 |  1.56 |    1.55 | 1.000000
   65 |  2008 |  1.57 |    1.56 | 1.000000
   65 |  2009 |  1.58 |    1.57 | 1.000000
   66 |  2000 |  1.59 |    1.58 | 1.000000
   66 |  2001 |   1.6 |    1.59 | 1.000000
   66 |  2002 |  1.61 |     1.6 | 1.000000
   66 |  2003 |  1.62 |    1.61 | 1.000000
   66 |  2004 |  1.63 |    1.62 | 1.000000
   66 |  2005 |  1.64 |    1.63 | 1.000000
   66 |  2006 |  1.65 |    1.64 | 1.000000
   66 |  2007 |  1.66 |    1.65 | 1.000000
   66 |  2008 |  1.67 |    1.66 | 1.000000
   66 |  2009 |  1.68 |    1.67 | 1.000000
   67 |  2000 |  1.69 |    1.68 | 1.000000
   67 |  2001 |   1.7 |    1.69 | 1.000000
   67 |  2002 |  1.71 |     1.7 | 1.000000
   67 |  2003 |  1.72 |    1.71 | 1.000000
   67 |  2004 |  1.73 |    1.72 | 1.000000
   67 |  2005 |  1.74 |    1.73 | 1.000000
   67 |  2006 |  1.75 |    1.74 | 1.000000
   67 |  2007 |  1.76 |    1.75 | 1.000000
   67 |  2008 |  1.77 |    1.76 | 1.000000
   67 |  2009 |  1.78 |    1.77 | 1.000000
   68 |  2000 |  1.79 |    1.78 | 1.000000
   68 |  2001 |   1.8 |    1.79 | 1.000000
   68 |  2002 |  1.81 |     1.8 | 1.000000
   68 |  2003 |  1.82 |    1.81 | 1.000000
   68 |  2004 |  1.83 |    1.82 | 1.000000
   68 |  2005 |  1.84 |    1.83 | 1.000000
   68 |  2006 |  1.85 |    1.84 | 1.000000
   68 |  2007 |  1.86 |    1.85 | 1.000000
   68 |  2008 |  1.87 |    1.86 | 1.000000
   68 |  2009 |  1.88 |    1.87 | 1.000000
   69 |  2000 |  1.89 |    1.88 | 1.000000
   69 |  2001 |   1.9 |    1.89 | 1.000000
   69 |  2002 |  1.91 |     1.9 | 1.000000
   69 |  2003 |  1.92 |    1.91 | 1.000000
   69 |  2004 |  1.93 |    1.92 | 1.000000
   69 |  2005 |  1.94 |    1.93 | 1.000000
   69 |  2006 |  1.95 |    1.94 | 1.000000
   69 |  2007 |  1.96 |    1.95 | 1.000000
   69 |  2008 |  1.97 |    1.96 | 1.000000
   69 |  2009 |  1.98 |    1.97 | 1.000000
   70 |  2000 |  1.99 |    1.98 | 1.000000
(400 rows)

